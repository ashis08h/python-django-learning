COALESCE - COALESCE is used to handle NULL values column by replacing with some default values.
    select fcast_item, COALESCE(disc_dt, 'N/A') as disc_dt, src_sys from In_Bundles;

SUM, AVG, MAX, MIN - In sql server SUM, AVG, MAX, MIN are the aggregate functions used to perform
calculations on a set of values within a specified column of tables. These functions are often
used in combination with the GROUP BY clause to calculate aggregate values of groups of rows.

SUM:
    select SUM([exch_rate_loc_to_usd]) from [In_CurrencyConversionNew];

AVG:
    select AVG([exch_rate_loc_to_usd]) from [In_CurrencyConversionNew];

MAX:
    select MAX([exch_rate_loc_to_usd]) from [In_CurrencyConversionNew];

MIN:
    select MIN([exch_rate_loc_to_usd]) from [In_CurrencyConversionNew];

LIMIT:
    In sql server we used to do limit by top(100)
    select top(100) [iso_curcy_cd], [iso_curcy_code] from [In_CurrencyConversionNew];

ORDER BY:
    select * from [o9.ssis.Amway].[dbo].[In_CurrencyConversionNew] order by [Date] DESC;

WHERE:
      select * from [o9.ssis.Amway].[dbo].[In_CurrencyConversionNew] where
      [Date] = '2019-12' order by [Date];

FORMAT:
    In the SQL server FORMAT is used to display the datetime column data into some format like
    'dd/mm/yyyy'
    It will only format the date field column value. It will not work with nvarchar column data
    directly for nvarchar column types we need to use convert function to convert into datetime
    field then apply format.
    like below example

    select FORMAT([Date], 'MM/dd/yyyy') from [In_CurrencyConversionNew];
    select FORMAT(CONVERT(DATE, [Date], 20), 'MM/dd/yyyy') from [In_CurrencyConversionNew];

CASE STATEMENT:
     CASE
	    WHEN [Date] = '2020-03' THEN 'ASHISH'
	    WHEN [Date] IS NULL THEN 'KUMAR'
	    ELSE 'SAH'
	 END
     FROM [o9.ssis.Amway].[dbo].[In_CurrencyConversionNew];

JOINS:
    Joins are use to get data from more than one table.

    LEFT JOIN -
        Returns all the rows from the left table and the matched rows from the right table.
        If there are no matching rows, NULL values are included for the columns from the right table.

        SELECT si.[Item], si.[Location], mi.[fcast_item] FROM [Stg_ItemLocAttr] si
        LEFT JOIN [o9.ssis.Amway].[dbo].[Master_Item_Latest] mi
        ON si.[Item] = mi.[fcast_item];

    RIGHT JOIN -
        Returns all the rows from the right table and the matched rows from the left table.
        If there are no matching rows, NULL values are included for the columns from the left table.

        SELECT si.[Item], si.[Location], mi.[fcast_item] from [Stg_ItemLocAttr] si
        RIGHT JOIN [Master_Item_Latest] mi
        ON si.[Item] = mi.[fcast_item];

    INNER JOIN -
        Returns the rows when there is a match in both the tables based on the join conditions.

        SELECT si.[Item], si.[Location], mi.[fcast_item] from [Stg_ItemLocAttr] si
        INNER JOIN [Master_Item_Latest] mi
        ON si.[Item] = mi.[fcast_item];

    FULL OUTER JOIN -
        Returns all the rows when there is a match in one of the tables. NULL values are
        included for the columns that do not have a match.

        SELECT * FROM [Stg_ItemLocAttr] si
        FULL JOIN [Master_Item_Latest] mi
        ON si.[Item] = mi.[fcast_item];

    CROSS JOIN -
        Returns the cartesian product of the two tables, ie all the possible combinations of
        rows from the two tables.

        SELECT si.[Item], si.[Location], mi.[fcast_item] from [Stg_ItemLocAttr] si
        CROSS JOIN [Master_Item_Latest] mi;

    SELF JOIN -
        Joins a table to itself based on a related columns.

        SELECT il1.[Item], il2.[Location] FROM [Stg_ItemLocAttr] il1
        INNER JOIN [Stg_ItemLocAttr] il2 ON il1.[Item] = il2.[IntroProgram];

MERGE STATEMENT -
    In SQL SERVER, the MERGE statement is used to perform an upsert operation which means it can
    insert, update or delete records in the target table based on the results of a join with a source
    table. The MERGE statement allows you to efficiently synchronize two tables based on a specified
    condition.

    MERGE INTO [test_table_1] as target
    USING [test_table_2] as source
    ON target.id = source.id
    WHEN MATCHED THEN
    UPDATE SET target.name = source.name
    WHEN NOT MATCHED BY target THEN
    INSERT (id, name)
    VALUES (source.id, source.name)
    WHEN NOT MATCHED BY source THEN
    DELETE;

    Note:
        target_table - The table where data will be merged.
        source_table - The table or query whose data will be used to merge.
        join_column - The column which is used to merge the source table and target table.
        WHEN MATCHED - specifies what action to take when a match found.
        WHEN NOT MATCHED BY target - specifies what action to take when a row exist in the source
            table but not exist in the target table.
        WHEN NOT MATCHED BY source - specifies what action to take when a row exist in the target
            table but not exist in the source table.

REPLACE -
    SELECT REPLACE([column_name], '89078', 'NA')
    FROM [In_Initiative]

TRUNCATE TABLE STATEMENT -
    TRUNCATE TABLE [In_Initiative];

INSERT INTO STATEMENT -
    INSERT INTO [test_table_2] (id, name)
    select id, name from [test_table_1];

    INSERT INTO [test_table_2] (id, name)
    VALUES (4, 'ashish'), (5, 'kumar');

CONCATENATION -
    select '_' + column_name1 + '_' + column_name2 from [test_table_2];

CONVERT -
    convert function is used to convert data type of a value.

    SELECT CONVERT(VARCHAR(10), integer_column) as string_value FROM test_table_2;
    SELECT CONVERT(nvarchar(10), id) + '_' + name from [test_table_2];

    In case of convert into date format it takes 3 arguments.

    SELECT CONVERT(DATE, column_name, 120) FROM table_name;

CAST -
    cast function is used to convert data type of a value.

    SELECT CAST(integer_column as VARCHAR(10)) as string_value FROM test_table2;
    SELECT CAST(id as nvarchar(10)) + '_' + name from [test_table_2];

UNION -
    SELECT id, name FROM [test_table_1]
    UNION
    SELECT id, name FROM [test_table_2];

DISTINCT -
    It will return unique values.
    SELECT DISTINCT name FROM [test_table_2];

ORDER OF EXECUTION OF CLAUSE -
    SELECT column1, column2
    FROM table_name
    WHERE condition
    GROUP BY column1
    HAVING aggregate_function(column2) > value
    ORDER BY column1 ASC
    OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;

    Example -

    SELECT [DATE], SUM([RecordId]) FROM [Stg_TNA]
    WHERE [LOC_L1] = 'KR_07'
    GROUP BY [DATE] HAVING SUM([RecordId]) > 1
    ORDER BY [DATE] DESC
    OFFSET 3 ROWS FETCH NEXT 10 ROWS ONLY;

ISNULL -
    isnull function is used to handle null values in the column.
    SELECT ISNULL([TNA], 'N/A') FROM [Stg_TNA];

What is the difference between isnull and coalesce in sql server?
    In sql server both the ISNULL function and COALESCE function used to handle null values.
    but there are differences in their behaviour and usage.

    ISNULL function -
    ISNULL function used to replace NULL values with a specified replacement value.
    ISNULL function will accept only two argument.
    syntax -
        SELECT ISNULL(Column1, 0) AS NewColumn
        FROM Table;

    COALESCE function -
    The COALESCE function used to return the first non-NULL value among its arguments.
    The COALESCE function will accept multiple arguments.
    syntax -
        SELECT COALESCE(Column1, Column2, Column3, 'No Value') AS NewColumn
        FROM Table;

LEFT -
    The LEFT function is used to extract a specified number of characters from the left side of
    a string.
    SELECT LEFT([ROOT], 3) FROM [Stg_TNA];

RIGHT -
    The RIGHT function is used to extract a specified number of characters from the right side of
    a string.
    SELECT RIGHT([ROOT], 3) FROM [Stg_TNA];

SUBSTRING -
    In SQL server, the SUBSTRING function is used to extract a substring from a string. It allows
    you to retrieve a portion of the characters from a specified position within the string.

    SELECT SUBSTRING([ROOT], 3, 3) from [Stg_TNA];
    Here first 3 is start point it will count from 1 not with zero and the second screen is
    for length.

DATEDIFF -
    In sql server the DATEDIFF is a function used to calculate the difference between two dates,
    returning the the result in a specified datepart(such as days, months, years)
    SELECT DATEDIFF(DAY, '01-02-2024', '03-05-2024');
    SELECT DATEDIFF(MONTH, '01-02-2024', '03-05-2024');
    SELECT DATEDIFF(YEAR, '01-02-2024', '03-05-2024');

IS NULL CONDITION IN WHERE CLAUSE -
    SELECT * FROM [Stg_TNA] WHERE [TNA] IS NULL;

GETDATE -
    In sql server GETDATE() function is used to retrieve the current system date and the time from
    SQL SERVER operating system. It return the current date and time as a datetime data type.

    SELECT GETDATE() AS current_date_time;

IF ELSE CONDITION -
    IF (SELECT IsManager FROM Employee WHERE name = 'ashish') = 1
        BEGIN
            UPDATE Employee
            SET LastName = LastName + '_manager'
            WHERE EmployeeId = 1
        END
    ELSE
        BEGIN
            UPDATE Employee
            SET LastName = LastName + '_employee'
            WHERE EmployeeId = 1
        END

WHILE LOOP -
    In SQL server WHILE loop or a CURSOR to iterate over a set of rows returned by a query or to
    perform iterative task.

    DECLARE @counter INT = 1;
    WHILE @counter <= 10
        BEGIN
            PRINT 'counter is - '+ CONVERT(VARCHAR(10), @counter);
            SET @counter += 1
        END

CURSOR -

    DECLARE @id INT;
    DECLARE @name NVARCHAR(10);

    DECLARE employee_cursor CURSOR FOR
    SELECT id, name FROM [test_table_1];

    OPEN employee_cursor;

    FETCH NEXT FROM employee_cursor INTO @id, @name;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        PRINT 'entry is ' + CONVERT(NVARCHAR(10), @id) + @name;
        FETCH NEXT FROM employee_cursor INTO @id, @name;
    END;

    CLOSE employee_cursor;
    DEALLOCATE employee_cursor;

UPDATE TABLE STATEMENT -

    UPDATE [test_table_1]
    SET name  = 'name1'
    WHERE id = 1;

IN OR NOT IN OPERATOR -

    SELECT * FROM [test_table_1] WHERE id IN (SELECT id FROM [test_table_2])

WITH KEYWORD -
    In SQL Server, the WITH keyword is used to define a COMMON TABLE EXPRESSION(CTE).
    A CTE is a temporary result set that can be referenced within a query. It allows you to create
    named temporary results sets that can be used to simplify complex queries, improve readability
    and avoid code duplication.

    Example 1-
        WITH AverageCte AS(
            SELECT AVG([Initiative]) AS AvgSal FROM [In_Inititative])
        )
        SELECT * FROM [In_Initiative] WHERE [Inititative] >= (SELECT AvgSal FROM AverageCte);

    Example 2-
        WITH CTE_TEMP AS (
            SELECT item, location FROM stg_intro_program GROUP BY item, location HAVING COUNT(1) > 1
        )
        UPDATE stg_intro_program SET isValid = -1 WHERE item IN (SELECT ITEM FROM CTE_TEMP AS TEMP)
        AND location IN (SELECT location FROM CTE_TEMP AS TEMP);

    Example 3-
        WITH CTE_TEMP AS (
            SELECT item, location FROM stg_intro_program GROUP BY item, location HAVING COUNT(1) >1
        )
        INSERT INTO Error_information(record_id, table_name, error_description)
        SELECT record_id, 'stg_intro_program', 'Item missing' FROM stg_intro_program AS stg,
        CTE_TEMP as temp WHERE stg.item = temp.item AND stg.location = temp.location;

GROUP BY AND HAVING CLAUSE -
    The GROUP BY and HAVING clauses in SQL Server are used together to group the rows that have
    same values in specified columns into summary rows and then filter those groups based on
    aggregate conditions.

    Example -
        SELECT [PlanningItem], AVG(CONVERT(FLOAT, [BV_AMT])) FROM [In_UnitPrice]
        GROUP BY [PlanningItem] HAVING AVG(CONVERT(FLOAT, [BV_AMT])) >= 3270;

DENSE_RANK() FUNCTION -
    The DENSE_RANK function in SQL Server is a windows function that calculates the rank of the
    row within a partition of a result set, without any gaps in the ranking. It assigns the same
    rank to rows with the same values, and the next rank after that is incremented by one. without
    leaving any gaps in the ranking.

    SYNTAX -
    DENSE_RANK() OVER (
        [PARTITION BY partition_expression, ....]
        ORDER BY order_expression [ASC|DESC]
    )

    PARTITION BY - Optional clause that divides the result set into partitions to which the function
    is applied separately. If not specified, the function operates on the entire result set.

    Example 1- WITHOUT PARTITION CLAUSE

        SELECT [InputFileName], [InTableName], DENSE_RANK() OVER (ORDER BY [InputFileName] DESC) AS RANK
        FROM [Control_Purge_hanging_member];

    Example 2 - WITH PARTITION CLAUSE

        Let's consider an example where we want rank of the student on base of scores in each
        department. Lets take a table student having StudentId, Name, Score Department

        SELECT StudentId, Name, Score, Department, DENSE_RANK() OVER (
            PARTITION BY Department ORDER BY SCORE DESC
        )
        FROM Student;

How to find the third highest amount from a table.

    SELECT DISTINCT [BV_AMT] FROM (
    SELECT [BV_AMT], DENSE_RANK() OVER(
        ORDER BY CONVERT(FLOAT, [BV_AMT]) DESC
    ) AS st_rank FROM [In_UnitPrice]) ranked_data WHERE st_rank = 3;

DATEADD FUNCTION -

    IN SQL Server the DATEADD function is used to add or subtract a specified time interval to a
    given date or time value. It returns a new datetime value after the specified interval has been
    added or subtracted.

    SYNTAX -
    DATEADD(datepart, number, date)

    Here,
    datepart - Specifies the unit of time to add or subtract (day, month, year, hour, minute)
    number - Specifies the number of intervals to add or subtract. It can be positive or negative
             integer.
    date - The date or datetime value to which the interval is added or subtracted.

    Example -
        SELECT DATEADD(day, 7, '2024-02-04');
        In place of hardcoded date we can give column name also.

        SELECT CONVERT(DATE, DATEADD(day, 7, [Date]), 20) FROM [Stg_TNA];

PARTITION BY -
    In SQL Server PARTITION BY clause is used in conjunction with windows functions to divide the
    result set into partitions or groups based on the values of one or more columns. Windows function
    are applied separately to each partition, allowing you to perform calculations and aggregations
    within each group.

    Example -
    Suppose we have a table named Sales with columns ProductId, Category, SalesDate and Amount.
    We want to calculate the total sales amount for each category and for each year separately.

    SELECT ProductId, Category, YEAR(SalesDate) AS SalesYear, SUM(Amount) OVER (PARTITION BY
    Category, YEAR(SalesDate)) AS TotalSalesAmount FROM Sales;

    SELECT [ROOT], [LOC_L1], YEAR([Date]), SUM([RecordId]) OVER (
    PARTITION BY [LOC_L1], YEAR([Date])
    ) AS TotalSumAmount FROM [Stg_TNA];

What is the difference between PARTITION BY AND GROUP BY IN SQL SERVER?

    PARTITION BY and GROUP BY  both are used for data aggregation.
    In PARTITION BY result rows set does not reduced, but in GROUP BY result rows set will reduced.

WINDOWS FUNCTION IN SQL SERVER -
    In SQL Server, a window function (also known as an analytic function or a windowed function) is
    a type of function that performs calculations across a set of rows related to the current row,
    without reducing the the result set. Windows function are applied in conjunction with the
    OVER clause and are used to perform complex analytical tasks, such as calculating running
    total, ranking, moving average and more.

    1. Aggregate Functions:
        SUM(), MAX(), MIN(), AVG(), COUNT()

    2. Ranking Function:
        ROW_NUMBER(), RANK(), DENSE_RANK(), NITLE()

    3. Window Aggregate Functions:
        SUM() OVER(), AVG() OVER(), MIN() OVER(), MAX() OVER(), COUNT() OVER()

    4. Window Ranking Functions:
        ROW_NUMBER() OVER(), RANK() OVER(), DENSE_RANK() OVER(), NITLE() OVER()

    5. Other Window Functions:
        LEAD(), LAG(), FIRST_VALUE(), LAST_VALUE()

What is the difference among ROW_NUMBER(), RANK() AND DENSE_RANK() IN THE SQL Server.

    ROW_NUMBER() - Assigns a unique sequential integer to each row in the result set based on the
        specified order.
        It does not handle ties. If multiple rows have the same values that determine the order, each
        row will receive a different row number.
        The row numbers generated by ROW_NUMBER() ARE SEQUENTIAL WITHOUT ANY GAPS.

        SELECT [Date], [ROOT], ROW_NUMBER() OVER (
        ORDER BY [ROOT] DESC
        ) AS ROW_NUMBERS FROM [Stg_TNA];

    RANK() - Assigns a unique rank to each distinct row value within the result set based on the
        specified order.
        It handles ties by assigning the same rank to row with the same value that determine the
        order. The next rank is then incremented by the number of ties rows.
        For Example, If five rows tie for the first place, then the next rank will be 6 not the 2.
        RANK() may result in gaps in the ranks if tied rows are present.

        SELECT [Date], [ROOT], RANK() OVER (
        ORDER BY [ROOT] DESC
        ) AS RANK FROM [Stg_TNA];

    DENSE_RANK() - Assigns a unique rank to each distinct row value within the result set based on
        the specified order.
        It also handles ties by assigning the same rank to rows with the same values that determine
        the order, but the next rank is not incremented by the number of tied rows.
        For Example, If five rows tie for the first place, the next rank will still be 2 not 6.
        DENSE_RANK() does not result in gaps in the ranks.

        SELECT [Date], [ROOT], DENSE_RANK() OVER (
            ORDER BY [ROOT] DESC
        ) AS RANK FROM [Stg_TNA];


What is Indexing in SQL?
Indexing in the SQL is a database optimization technique that improves the speed of the data
retrieval operations on a table. It creates a data structure (similar to lookup table) that the
databases uses to quickly locate rows without scanning the entire table.

Why Use Indexing in SQL?
1) Improves query performance.
    Indexes significantly reduce the time taken to execute queries, especially for large tables.

2) Efficient Sorting and filtering.
    Indexes help with Order by, group by, and where clauses.

3) Quick Lookup for primary and foreign keys.
    Ensure fast access for key constraint.

4) Reduce full table scans.
    Without an index, the database may need to scan the entire table to find rows, which is
    inefficient for large datasets.

How does indexing work?
Indexing creates a separate data structure (like tree or hash) that holds the values of the
indexed column(s) and pointers to the corresponding rows in the table.

When you query a table with an indexed column, the database use the index to a quickly
find the matching rows, instead of scanning the entire table.

Types of index -
1) Clustered index -
    Organizes the table's data rows in the order of index.
    Only one clustered index is allowed per table because it changes the physical order of the data.

    syntax - CREATE CLUSTERED INDEX idx_Department ON Employees (Deepartment);
    Where idx_Department is the name of index.
        Employees is table name on which we wanted to add index.
        Deepartment is the column name to which we wanted to create index.

2) Non Clustered index -
    Creates a separate data structure to store the indexed column and a pointer to the actual data.
    A table can have multiple non-clustered index.

    syntax - CREATE NONCLUSTERED INDEX idx_Department ON Employees (Deepartment);
    Where idx_Department is the name of index.
        Employees is table name on which we wanted to add index.
        Deepartment is the column name to which we wanted to create index.

3) Unique index -
    Ensures that all values in the indexed column are unique.

4) Composite index -
    An index on multiple columns.

5) Full text index -
    Used for text-based searches.

Dropping an index -
DROP INDEX idx_Department ON Employees;

Advantages of Indexing -
1) Faster Query execution -
    Reduces query execution time for select statements.
2) Efficient data access -
    Speeds up filtering, sorting, and joins.
3) Uniqueness enforcement -
    Ensures unique values for key constraints.

Disadvantages of indexing -
1) Slower write Operations -
    INSERT, UPDATE, and DELETE operations take longer because the index also needs to be updated.

2) Storage Overhead -
    Indexes require additional disk space.

3) Maintenance -
    Indexes must be maintained as data is modified.

What are views in SQL?
A View in SQL is a virtual table that is created by a select query. It does not store data
physically; instead, it retrieves data from the underlying table(s) whenever it is queried.
Think of view as a saved query that can be treated like a table.

Why use Views in SQL?
1) Simplify complex query -
    Abstract complex JOIN, GROUP BY, or filtering logic into a single object that can be reused.

2) Improve security -
    Restrict user access to specific columns or row by creating views that expose only the
    required data.

3) Enhance readability -
    Simplify queries by hiding table relationships and calculations.

4) Maintain Consistency -
    Ensure consistent query results when the same logic is needed across multiple parts of an
    application.

5) Provide virtual aggregations -
    Aggregate or summarize data without physically storing the result.

Syntax to create view -

CREATE VIEW view_name AS
select column1, column2, ...
FROM table_name WHERE condition;

1) Create a simple view -

CREATE VIEW EmployeeDepartments AS
SELECT Name, Department from Employee_test_table;

SELECT * FROM EmployeeDepartments;

2) View with filtering -

CREATE VIEW HighSalaryEmployee AS
SELECT Name, Department, Salary from Employee_test_table
where Salary > 60000;

SELECT * FROM HighSalaryEmployee;

3) View with Aggregation -

CREATE VIEW DepartmentSalary AS
SELECT Department, AVG(CAST(Salary AS INT)) AS AVGSAL
FROM Employee_test_table GROUP BY Department;

SELECT * FROM DepartmentSalary;

4) View with joins -

Suppose we have another table -

CREATE TABLE Departments_test_table (
    Department NVARCHAR(50) NOT NULL,
    Location NVARCHAR(50) NOT NULL
);

EXEC sp_help Departments_test_table; - This is the command to check table structure.

CREATE VIEW EmployeeDetail AS
SELECT e.Name, e.Department, d.Location
FROM Employee_test_table e JOIN Departments_test_table d
ON e.Department = d.Department;


How to update views?

Modify a view
Use CREATE OR REPLACE syntax to update a view.

CREATE OR REPLACE VIEW HighSalaryEmployees AS
SELECT Name, Department, Salary FROM Employee_test_table
WHERE Salary >= 65000;

Advantages of views -
1) Data security -
    Hide sensitive data(e.g- salaries) by exposing only necessary columns.

2) Simplifies repeated queries -
    Save complex queries as views for reuse.

3) Logical data independence -
    Applications can query the view even if the underlying table structure changes.

4) Faster query writing -
    Write shorter, simpler queries by using views.

Disadvantage of views -

1) Performance overhead -
    Views do not store data, the query runs every time the view is accessed, potentially
    slowing performance.

2) Complex Maintenance -
    If underlying table changes(e.g- column name renamed or remove) views may break.

3) Read only -
    By default views are read only. However, with INSTEAD OF triggers, they can be made updatable.

    






